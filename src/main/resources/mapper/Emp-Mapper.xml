<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.EmpMapper">



<select id="selectEmpById" parameterType="String" resultType="EmpVO">
	SELECT   A.EMP_ID					
			,A.EMP_SUP_ID				
			,A.EMP_NAME				
			,A.EMP_PWD				
			,A.EMP_REGNO
			,NVL(A.EMP_HP,'없음') 				
			,A.EMP_SIGN				
			,A.EMP_PICTURE			
			,A.EMP_ST
			,A.EMP_HP
			,A.EMP_EMAIL				
			,A.EMP_ADD1	
            ,A.EMP_ADD2
            ,A.ATTEND_ST_ID
			,A.DEPT_ID								
			,A.EMP_CREATE_DT			
			,A.EMP_UPDATE_DT
			,NVL(A.EMP_EMAIL,'없음') 
			,A.AUTH_ID
			,A.TEAM_ID
			,A.CODE_ID
			,A.EMP_CODE_RESP_ID			
            ,B.ATTEND_ST_NAME
						<!-- 출근상태(지각..etc) -->
            ,A.EMP_UPDATE_YN
						<!-- 상태수정일 -->
            ,C.DEPT_NAME
						<!-- 부서이름 -->
            ,D.CODE_NAME 
						<!-- 코드 이름==부서이름-->
            ,(
                SELECT  F.DEPT_NAME
                FROM    EMP E, DEPT F
                WHERE   E.TEAM_ID = F.DEPT_ID
                AND     E.EMP_ID = #{emp}
              ) AS TEAM_NAME
							<!-- 부서이름출력 ((개인)팀id=부서(id)) 
								AND 사원정보까지 같으면(empId)는 객체로 넘겨받아야함
								부서와 팀 구분❌ -> DEPT_TEAM_YN : 부서 / 팀 구분 처리
								사원에서 등록 할 때, 팀/부서 나눠서 저장

							-->
            ,NVL(E.AUTH_NAME,'없음')
	  FROM EMP A, ATTEND_ST B, DEPT C, CODE D, AUTH E
	 WHERE A.ATTEND_ST_ID = B.ATTEND_ST_ID(+)
	 <!-- 사원의 상태코드(fk) = 출근 상태코드(pk) 
				기준 테이블(emp)의 ATTENS_ST_ID가 대상 테이블(TB_ATTEND_ST)에 존재 할 경우 
				B.ATTEND_ST_NAME(컬럼) 가져오고 없으면 NULL로 조회된다.
				->사원의 출근상태를 조회하고 싶어서 (+) 사용 
			-->
       AND A.DEPT_ID = C.DEPT_ID
       AND A.CODE_ID = D.CODE_ID
			 <!-- 사원의 직급 코드(FK) = 코드의 코드ID -->
       AND A.AUTH_ID = E.AUTH_ID(+)
			 <!-- AUTH_ID(+)사용 사원에는 해당 컬럼없어도 출력
			-->
       AND A.EMP_ST IN (1, 4)
       AND EMP_ID = #{emp_Id}
</select>

<select id = "findPwCheck" resultType="int">
SELECT COUNT(*) FROM EMP WHERE EMP_EMAIL = #{emp_Email} and EMP_ID = #{emp_Id}
</select>

<update id ="findPw">
UPDATE EMP SET EMP_PWD = #{emp_Pwd} where EMP_EMAIL = #{emp_Email} and EMP_ID = #{emp_Id}
</update>


<update id="updateEmpMyPage" parameterType="EmpVO">
 UPDATE EMP
    SET EMP_HP = #{emp_Hp}
       ,EMP_EMAIL = #{emp_Email}
       ,EMP_ADD1 = #{emp_Add1}
       ,EMP_ADD2 = #{emp_Add2}
       ,ATTEND_ST_ID = #{attend_St_Id}
  WHERE EMP_ID = #{emp_Id}
</update>

<update id = "updateSign" parameterType="EmpVO">
UPDATE EMP SET EMP_SIGN = #{emp_Sign} where EMP_ID = #{emp_Id}

</update>

<select id = "idCnt" parameterType = "EmpVO" resultType = "int">
<![CDATA[
	SELECT COUNT(*) FROM EMP WHERE EMP_ID = #{emp_Id}
]]>
</select>

<insert id = "register">
INSERT INTO EMP 
(EMP_ID, EMP_NAME, EMP_PWD, EMP_REGNO, EMP_REGNO2, EMP_HP,EMP_ADD1, EMP_ADD2, EMP_EMAIL, AUTH_ID, DEPT_ID, TEAM_ID, EMP_SUP_ID, ATTEND_ST_ID,CODE_ID)
VALUES
(#{emp_Id}, #{emp_Name
},#{emp_Pwd},#{emp_Regno},#{emp_Regno2},#{emp_Hp},#{emp_Add1},#{emp_Add2},#{emp_Email}, #{auth_Id},#{dept_Id}, #{team_Id}, #{emp_Sup_Id}, #{attend_St_Id}, #{code_Id})
</insert>


<insert id="createAuthKey">
	insert into EMP_AUTH values(#{emp_Email}, #{emp_authkey})
</insert>

<update id="empAuth">
<![CDATA[update EMP set EMP_AUTH = 1 where (select count(*) from EMP_AUTH where EMP_EMAIL = #{emp_email}) > 0]]>
</update>
	<select id="selectEmpList" resultType="EmpVO">
		SELECT
		EMP.EMP_ID
		,EMP.EMP_SUP_ID
		,EMP.EMP_NAME
		,EMP.EMP_PWD
		,EMP.AUTH_ID
		,EMP.EMP_CODE_RESP_ID
		,EMP.EMP_REGNO
		,NVL(EMP.EMP_HP,'없음') empHp
		,EMP.EMP_SIGN
		,EMP.EMP_PICTURE
		,EMP.EMP_ST
		,EMP.EMP_ADD1
		,EMP.EMP_ADD2
		,EMP.DEPT_ID
		,EMP.EMP_CREATE_DT
		,EMP.EMP_UPDATE_DT
		,NVL(EMP.EMP_EMAIL,'없음') empEmail
		,EMP.ATTEND_ST_ID
		,ATTEND_ST.ATTEND_ST_NAME
		,CODE.CODE_NAME as officialName
		,DEPT.DEPT_NAME

		FROM	EMP, ATTEND_ST, CODE, DEPT
		WHERE   EMP.ATTEND_ST_ID = ATTEND_ST.ATTEND_ST_ID(+)
		<!-- 사원을 기준으로 출근상태를 모두 출력 대응되는 값이 없어도 NULL값으로 표시 -->
		AND		EMP.CODE_ID = CODE.CODE_ID
		AND     EMP.DEPT_ID = DEPT.DEPT_ID
		AND		EMP.EMP_ST IN (1,4)
		ORDER BY EMP.EMP_ID DESC

	</select>

	<select id="selectEmpIdListByDeptId" parameterType="EmpVO" resultType="EmpVO">
		SELECT  emp_id
		FROM	EMP
		WHERE	1=1
		<if test='dept_Id != null and !"".equals(dept_Id) '> <!-- dept_id가 null이 아니고 그 값이 빈 문자열이 아닐경우에 참-->
			AND		dept_id = #{dept_Id}
		</if>
		<if test='team_Id != null and !"".equals(team_Id) '> <!-- dept_id가 null이 아니고 그 값이 빈 문자열이 아닐경우에 참-->
			AND		team_id = #{team_Id}
		</if>
	</select>


</mapper>